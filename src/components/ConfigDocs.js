export default {
    chart:{
      categoriesKey: {type: "string / delegate", help: "key of categories in series data objects"},
      eventSubscribers: {type: "array", help: "custom events subscribers, see more in [Events](/events)"},
      eventsTypes: {type: "string", help: "events types used by interaction manager, see more in [Events](/events). Currently supported `eventTypes` implemented by the library: "},
      dataColorsScheme: {type: "string / array", help: "name of the one of default color schemes for the chart that is included in the library, or custom color scheme passed as an array of color values. At the chart level the next color from the provided colors array or the default scheme is assigned for every series"},
      valueKeys: {type: "array / delegate", help: "array of keys of fields in series data that should be treated as values"},
      noDataMessage: {type: "string / delegate", help: "message displayed when there is no data in series"},
      separators: {type: "object", help: "it works the same as **separators** option for [Series](/series), but is applied for values axes' labels and data labels. It has the lowest priority of all separators settings."},
      primaryValuesAxis: {type: "object", help: "defines ticks adjustments options and which elements (line and labels) of the primary (left or bottom) chart axis should be rendered"},
      line: {type: "boolean", help: "defines whether the line should be rendered"},
      labels: {type: "boolean", help: "defines whether the labels should be rendered"},
      ticks: {type: "object", help: "ticks configuration object"},
      fixedInterval: {type: "boolean / number", help: "defines a fixed interval between ticks."},
      marksVisible: {type: "boolean", help: "defines whether the ticks marks should be rendered"},
      separators: {type: "object", help: "it works the same as **separators** option for [Series](/series), but is applied for particular values axis' labels."},
      decimals: {type: "number", help: "the number of decimals to be rendered in data labels of a particular axis. It is ignored by default."},
      secondaryValuesAxis: {type: "object", help: "defines ticks adjustments options and which elements (line and labels) of the secondary (right or top) chart axis should be rendered."},
      categoriesAxis: {type: "object", help: "defines which elements (line and labels) of the category chart axis should be rendered"},
      categoriesLabels: {type: "delegate", help: "a function which is being applied one by one for every categories axis label. It takes the current **label** and the **value** of the first chart's entry connected to the category as parameters, and expects the updated label as a return value."},
      categoriesTitle: {type: "string / delegate", help: "title for the categories axis"},
      primaryValuesTitle: {type: "string / delegate", help: "title of the the primary values axis"},
      secondaryValuesTitle: {type: "string / delegate", help: "title of the secondary values axis"},
      valuesAxesDecimals: {type: "number", help: "the number of decimals to be rendered in data labels of both values axes. It has a lower priority than a similar setting for particular labels and is ignored by default."},
      orientation: {type: "string / delegate", help: "chart orientation, either vertical or horizontal"},
      width: {type: "number / delegate", help: "total chart width"},
      height: {type: "number / delegate", help: "total chart height"},
      margin: {type: "object / delegate", help: "chart inner margins, it is an object containing fields `top`, `right`, `bottom` and `left`."},
      legend: {type: "object / delegate", help: "configuration for chart legend."},
      visible: {type: "boolean", help: "defines whether the legend should be rendered."},
      position: {type: "string", help: "it can be set either to `top` or `bottom` and it sets the position of legend on the chart."},
      margin: {type: "object", help: "legend margins, it is an object containing fields `top`, `right`, `bottom` and `left`."},
      labelColor: {type: "string", help: "color of legend labels."},
      labelHighlightColor: {type: "string", help: "color of highlighted legend label."},
      shapesSize: {type: "number", help: "width and height of a graphical shape in legend entry."},
      labelsSize: {type: "number", help: "size of legend labels in px."},
      labelsMargin: {type: "number", help: "margin of legend labels from shapes in px."},
      stacked: {type: "boolean / delegate", help: "defines whether the data representations should start at the end of the previous ones in values axis"},
      matchStackTo100: {type: "boolean", help: "defines whether the stacked series should be extended to fill the full size of a container. Data labels are rendered at the center of data representations in this case, and show percentage of the value in a stack instead of the actual value."},
      clustered: {type: "boolean / delegate", help: "defines whether the data representations should start at the end of the previous ones in categories axis"},
      clusterScalingSize: {type: "number", help: "defines the total width of a whole cluster in percents of a bandwidth (the whole category width)"},
      overlapping: {type: "number", help: "defines whether and by how much the data representations should overlap the previous ones in categories axis"},
      overlappingType: {type: "string", help: "defines the type of overlapping. Itâ€™s applied when `overlapping` is set."},
      centerOrigin: {type: "boolean / delegate", help: "defines whether the origin (zero line) should be at the center of the chart."},
      gridlines: {type: "boolean / delegate", help: "defines whether the grid lines for values should be rendered"},
      mergeSeriesCategories: {type: "boolean / delegate", help: "defines whether the categories from every series should be shown on the graph."},
      forecastStart: {type: "string / number / delegate", help: "column value at which the forecast starts"},
      forecastOpacity: {type: "number / delegate", help: "opacity of forecasted data representation in percents"},
      dataLabelsMargin: {type: "number / delegate", help: "data labels' margin from data representation"},
      dataLabelsSize: {type: "number / delegate", help: "data labels' font size"},
      dataLabelsDecimals: {type: "number", help: "the number of decimals to be rendered in data labels of all series. It has a lower priority than similar setting for specific series."},
      dataOuterPadding: {type: "number / delegate", help: "padding of the first and last data representations in percents"},
      axesTitlesSize: {type: "number / delegate", help: "axes titles font sizes"},
      valuesAxesLabelsSize: {type: "number / delegate", help: "values axes labels' font size"},
      categoryAxisLabelsSize: {type: "number / delegate", help: "category axis labels' font size"},
      background: {type: "string / delegate", help: "background of the chart area"},
      truncateTitles: {type: "boolean / delegate", help: "defines whether the horizontal axes titles should be truncated (or hidden) if there is not enough space to render them."},
      showVersion: {type: "boolean / delegate", help: "defines whether the library version should be rendered at the bottom right of the chart"},
      xLabelsResponsiveness: {type: "array", help: "defines how the responsiveness of x axes labels should behave."},
      dataLabelsSeparators: {type: "object", help: "defines which separators should be used for data labels. It overwrites the default ones and small multiple's, but has got a lower priority than similar settings for series."},
      valuesAxesSeparators: {type: "object", help: "defines which separators should be used for values axes labels. It overwrites the default ones, but has got a lower priority than similar settings for axes."},
      thumbnail: {type: "boolean", help: "defines whether the chart should be drawn as a thumbnail. It is a shortcut for setting the following chart options:"}
    }
}
